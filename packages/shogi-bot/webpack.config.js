//
// Copyright 2019 Wireline, Inc.
//

const path = require('path');
const webpack = require('webpack');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const ZipPlugin = require('zip-webpack-plugin');

module.exports = {
  target: 'node',

  stats: 'errors-only',

  mode: 'development',

  externals: {
    wrtc: 'wrtc'
  },

  entry: {
    handler: path.resolve('./handler.js')
  },

  output: {
    path: path.resolve('./dist/es'),
    filename: '[name].js',
    libraryTarget: 'commonjs2'
  },

  node: {
    __dirname: true,
    __filename: true
  },

  // https://webpack.js.org/configuration/devtool/
  devtool: 'source-map',

  plugins: [
    new CopyWebpackPlugin([
      'service.yml'
    ]),

    new ZipPlugin({
      path: '../../',
      filename: './webpack.zip'   // TODO(burdon): Can this go in some other tmp directory (typically "out").
    }),

    // The pg-native bindings are not needed.
    new webpack.IgnorePlugin(/\/pg\//),

    // The Swagger autogenerated API clients misbehave without this due to a problem with superagent.
    new webpack.DefinePlugin({ 'global.GENTLY': false }),
    new webpack.IgnorePlugin(/^electron$/)
  ],

  resolve: {
    alias: {
      'scrypt.js': path.resolve(__dirname, '../../node_modules/scrypt.js/js.js')
    },
  },

  module: {
    rules: [
      { parser: { amd: false } },
      {
        test: /\.node$/,
        use: 'node-loader'
      },
      {
        test: /\.js$/,
        exclude: /node_modules/, // Don't transpile deps.
        use: {
          loader: 'babel-loader',
          options: {
            cacheDirectory: './dist/babel-cache/'
          }
        }
      },
      {
        test: /\.proto$/,
        use: {
          loader: 'raw-loader'
        }
      }
    ]
  }
};
